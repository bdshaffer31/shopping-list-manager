-make it so there can't be tomato and tomatoes (or warning)
-web scrape ingredients? API?
-email / text today's menu?
-multiple meals per recipe
-recipes should roughly say how many servings they will take to keep inventory?
-cast handeling of inputs
-set list of meals availbles? or just strip lower etc
-codify locations?
-use inheritance for interfaces (should all be based from generic class) 
-select recipe / book / ingredient should catch the misses
-ingredient collections that can be used in place of ingredients (ex. protien, condiment, topping)
-use *arg to make select recipe have option to go straight to add ingredients
-should shopping list be its own class?
-make it more clear where you are in hierarchy in inputs
    -partially accomplished?
-move create ingredient to shelf
-version control (add field to shelf with version number)
-shopping list makes a text file for printing
-shopping list removes redundant ingredients and displays location names
-switch to using with: as: for opening files properly
-shorten shelf and master db
-make write for humans more robust
-move create recipe / ingredient up hierarchy
-when select (rec / ingr / book) go striaght to display
-shoudlnt be able to create books, recipes, ingr with pre-existing name
-preference for recipes that share ingredients (two meals with bread instead of one with wrap)
-fix recipes as ingredients in general
-consdier changing nomenclature around recipes as ingredients (components?)
-after adding new rec to book have option to add ingrs
-prevent looping of recipes (recipe cannot ever be within itself)dangerous as is
-shared functions between interfaces should be handled better
-refine shopping list
    - display mutliples how?
    - print location names?
-unit tests!!

v 2.0
-nutrition facts
-bar code scan
-web based 
-GUI
